import { trace, unloads } from "./index.safe";

import { chunkArray, Semaphore } from "@inrixia/helpers";
import { ContextMenu, redux } from "@luna/lib";

const maxNewPlaylistSize = 450;

const maxButton = ContextMenu.addButton(unloads);
const maxButtonSema = new Semaphore(1);

ContextMenu.onMediaItem(unloads, async ({ mediaCollection }) => {
	const itemCount = await mediaCollection.count();
	if (itemCount === 0) return;

	const defaultText = `RealMAX ${itemCount} tracks`;
	maxButton.text ??= defaultText;

	maxButton.onClick(async () => {
		let trackIds: redux.ItemId[] = [];
		const sourceTitle = await mediaCollection.title();
		maxButton.text = `RealMAX Loading...`;

		try {
			let maxItems = 0;
			for await (const mediaItem of await mediaCollection.mediaItems()) {
				const maxItem = await mediaItem.max();
				maxButton.text = `RealMAX ${trackIds.length}/${itemCount} done. Found ${maxItems} replacements`;
				if (maxItem === undefined) {
					trackIds.push(mediaItem.id);
					continue;
				}
				trackIds.push(maxItem.id);
				maxItems++;
				trace.msg.log(`Found Max replacement for ${maxItem.tidalItem.title}!`);
			}
			if (trackIds.length !== itemCount) {
				return trace.msg.err(`Failed to create playlist "${sourceTitle}" item count mismatch ${trackIds.length} != ${itemCount}`);
			}

			if (maxItems === 0) {
				return trace.msg.err(`No replacements found for ${sourceTitle}`);
			}

			maxButton.text = `RealMAX Creating playlist...`;
			const { playlist } = await redux.interceptActionResp(
				() =>
					redux.actions["folders/CREATE_PLAYLIST"]({
						description: "Automatically generated by RealMAX",
						folderId: "root",
						fromPlaylist: undefined,
						title: `[RealMAX] ${sourceTitle}`,
						ids: trackIds.length > maxNewPlaylistSize ? undefined : trackIds,
					}),
				unloads,
				["content/LOAD_PLAYLIST_SUCCESS"],
				["content/LOAD_PLAYLIST_FAIL"]
			);
			if (trackIds.length > maxNewPlaylistSize) {
				for (const trackIdsChunk of chunkArray(trackIds, maxNewPlaylistSize)) {
					await redux.interceptActionResp(
						() =>
							redux.actions["content/ADD_MEDIA_ITEMS_TO_PLAYLIST"]({
								addToIndex: -1,
								mediaItemIdsToAdd: trackIdsChunk,
								onDupes: "ADD",
								playlistUUID: playlist.uuid!,
							}),
						unloads,
						["content/ADD_MEDIA_ITEMS_TO_PLAYLIST_SUCCESS"],
						["content/ADD_MEDIA_ITEMS_TO_PLAYLIST_FAIL"]
					);
				}
			}
			if (playlist?.uuid === undefined) {
				return trace.msg.err(`Failed to create playlist "${sourceTitle}"`);
			}
			trace.msg.log(`Created playlist "${sourceTitle}" with ${maxItems} replacements!`);
		} finally {
			maxButton.text = `RealMAX Done...`;
		}
	});
});
